// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  OWNER
  MANAGER
  STAFF
}

enum DomainStatus {
  PENDING
  ACTIVE
  ERROR
}

enum DomainProvider {
  VERCEL
  CLOUDFLARE
  MANUAL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?  // For MVP testing
  role      Role     @default(STAFF)
  isActive  Boolean  @default(true)  // For enabling/disabling users
  disabledAt DateTime?  // When user was disabled
  disabledBy String?     // Who disabled the user
  disabledReason String? // Reason for disabling
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  auditLogs   AuditLog[]
  analyticsEvents AnalyticsEvent[]

  @@map("users")
}

model Site {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  address     String?
  phone       String?
  email       String?
  timezone    String   @default("America/Denver")  // Company timezone
  currency    String   @default("USD")             // Company currency
  latitude    Float?   // GPS latitude
  longitude   Float?   // GPS longitude
  googlePlaceId String? // Google Places API place ID
  googleMapsUrl String? // Google Maps share URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memberships Membership[]
  domains     Domain[]
  hours       Hours[]
  events      Event[]
  eventTypes  EventType[]
  specials    Special[]
  specialDays SpecialDay[]
  menuItems   MenuItem[]
  menuCategories MenuCategory[]
  auditLogs   AuditLog[]
  healthPings HealthPing[]
  analyticsEvents AnalyticsEvent[]
  analyticsSummaries AnalyticsSummary[]

  @@map("sites")
}

model SpecialDay {
  id        String   @id @default(cuid())
  siteId    String
  date      DateTime // The specific date for this special day
  reason    String   // Reason for the special day (e.g., "City water shutoff", "Holiday closure")
  closed    Boolean  @default(true) // Whether the restaurant is closed on this day
  openTime  String?  // Opening time if not closed (e.g., "11:00")
  closeTime String?  // Closing time if not closed (e.g., "21:00")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, date]) // One special day per site per date
  @@map("special_days")
}

model Membership {
  id     String @id @default(cuid())
  userId String
  siteId String
  role   Role   @default(STAFF)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([userId, siteId])
  @@map("memberships")
}

model Domain {
  id          String         @id @default(cuid())
  siteId      String
  hostname    String         @unique
  status      DomainStatus   @default(PENDING)
  provider    DomainProvider @default(MANUAL)
  verifiedAt  DateTime?
  
  // Verification fields
  verificationTxt    String?   // TXT record value for verification
  verificationRecord String?   // Full DNS record (e.g., "verification=abc123")
  verificationHost   String?   // Host for TXT record (e.g., "_vercel" or "@")
  
  // Vercel-specific fields
  vercelProjectId String?      // Vercel project ID
  vercelDomainId  String?      // Vercel domain ID
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  verificationAttempts VerificationAttempt[]
  telemetryEvents TelemetryEvent[]

  @@map("domains")
}

model VerificationAttempt {
  id          String   @id @default(cuid())
  domainId    String
  attempt     Int      @default(1)
  maxAttempts Int      @default(10)
  nextRetryAt DateTime
  status      String   @default("pending") // pending, verified, failed, timeout
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("verification_attempts")
}

model TelemetryEvent {
  id        String   @id @default(cuid())
  domainId  String
  eventType String   // verification_started, verification_success, verification_failed, etc.
  severity  String   // info, warning, error, critical
  message   String
  details   String?  // JSON string
  timestamp DateTime @default(now())
  resolved  Boolean  @default(false)
  resolvedAt DateTime?
  resolvedBy String?

  // Relations
  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("telemetry_events")
}

model Hours {
  id        String   @id @default(cuid())
  siteId    String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  openTime  String?  // "09:00"
  closeTime String?  // "21:00"
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, dayOfWeek])
  @@map("hours")
}

model Event {
  id          String    @id @default(cuid())
  siteId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  startTime   String?   // "19:00"
  endTime     String?   // "22:00"
  location    String?   // "Main Dining Room", "Patio", etc.
  isActive    Boolean   @default(true)
  image       String?   // Image URL
  eventTypeId String?   // Reference to custom event type
  price       String?   // Price display (e.g., "$10", "Free", "BOGO")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  eventType EventType? @relation(fields: [eventTypeId], references: [id], onDelete: SetNull)
  images EventImage[]
  ctas EventCTA[]

  @@map("events")
}

model EventType {
  id          String   @id @default(cuid())
  siteId      String
  name        String   // "Food Special", "Sports Event", "Entertainment", etc.
  description String?
  color       String?  // Hex color for display (e.g., "#FF6B35")
  icon        String?  // Icon name or emoji
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  events Event[]

  @@map("event_types")
}

model EventImage {
  id        String   @id @default(cuid())
  eventId   String
  url       String   // Image URL
  alt       String?  // Alt text for accessibility
  caption   String?  // Image caption
  sortOrder Int      @default(0) // For ordering multiple images
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_images")
}

model EventCTA {
  id        String   @id @default(cuid())
  eventId   String
  text      String   // Button text (e.g., "Get Tickets", "Learn More")
  url       String   // Link URL
  type      String   @default("external") // "external", "facebook", "phone", "email"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_ctas")
}

model Special {
  id           String   @id @default(cuid())
  siteId       String
  name         String
  description  String?
  price        Float?   // Special price
  originalPrice Float?  // Original price for comparison
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean  @default(true)
  image        String?  // Image URL
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("specials")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String
  userRole     Role
  userEmail    String?
  userName     String?
  action       String   // "create", "update", "delete", "rollback", etc.
  resource     String   // "events", "specials", "menu", "hours", "profile", etc.
  resourceId   String?  // ID of the specific resource being modified
  siteId       String?
  siteName     String?
  oldValue     String?  // JSON string of previous state
  newValue     String?  // JSON string of new state
  changes      String?  // JSON string of specific changes
  success      Boolean  @default(true)
  errorMessage String?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  metadata     String?  // JSON string with additional context
  rollbackData String?  // JSON string of data needed for rollback
  canRollback  Boolean  @default(false)

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model MenuItem {
  id          String   @id @default(cuid())
  siteId      String
  name        String
  description String?
  price       Float
  category    String
  isAvailable Boolean  @default(true)
  image       String?  // Image URL
  allergens   String   @default("[]") // JSON array as string
  calories    Int?
  source      String   @default("manual") // "manual", "ocr", "import"
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model MenuCategory {
  id          String   @id @default(cuid())
  siteId      String
  name        String
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("menu_categories")
}

model HealthPing {
  id        String   @id @default(cuid())
  siteId    String
  url       String
  status    Int      // HTTP status code
  responseTime Int?  // Response time in milliseconds
  createdAt DateTime @default(now())

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("health_pings")
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  siteId      String
  eventType   String   // "pageview", "click", "cta_click", "special_view", "menu_view", etc.
  eventName   String   // Specific event name (e.g., "hero_cta", "special_123", "menu_breakfast")
  page        String   // Page path (e.g., "/", "/specials", "/menu")
  element     String?  // HTML element that was clicked (e.g., "button", "link", "image")
  elementId   String?  // Element ID or class
  elementText String?  // Text content of the element
  url         String   // Full URL
  referrer    String?  // Referrer URL
  userAgent   String?  // User agent string
  ipAddress   String?  // IP address (hashed for privacy)
  sessionId   String?  // Session identifier
  userId      String?  // User ID if logged in
  metadata    String?  // JSON string with additional event data
  timestamp   DateTime @default(now())

  // Relations
  site Site  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model AnalyticsSummary {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime // Date (YYYY-MM-DD)
  period      String   // "daily", "weekly", "monthly"
  
  // Page metrics
  pageviews   Int      @default(0)
  uniqueVisitors Int   @default(0)
  sessions    Int      @default(0)
  avgSessionDuration Int @default(0) // in seconds
  
  // Engagement metrics
  ctaClicks   Int      @default(0)
  specialViews Int     @default(0)
  menuViews   Int      @default(0)
  eventViews  Int      @default(0)
  
  // Top content (JSON arrays)
  topPages    String   @default("[]") // [{"page": "/", "views": 100}, ...]
  topSpecials String   @default("[]") // [{"specialId": "123", "views": 50}, ...]
  topEvents   String   @default("[]") // [{"eventId": "456", "views": 25}, ...]
  
  // Device/browser data
  deviceTypes String   @default("[]") // [{"type": "mobile", "count": 60}, ...]
  browsers    String   @default("[]") // [{"browser": "Chrome", "count": 40}, ...]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, date, period])
  @@map("analytics_summaries")
}