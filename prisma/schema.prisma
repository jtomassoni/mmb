// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  OWNER
  MANAGER
  STAFF
}

enum DomainStatus {
  PENDING
  ACTIVE
  ERROR
}

enum DomainProvider {
  VERCEL
  CLOUDFLARE
  MANUAL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  auditLogs   AuditLog[]

  @@map("users")
}

model Site {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  address     String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memberships Membership[]
  domains     Domain[]
  hours       Hours[]
  events      Event[]
  specials    Special[]
  menuItems   MenuItem[]
  auditLogs   AuditLog[]
  healthPings HealthPing[]

  @@map("sites")
}

model Membership {
  id     String @id @default(cuid())
  userId String
  siteId String
  role   Role   @default(STAFF)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([userId, siteId])
  @@map("memberships")
}

model Domain {
  id          String         @id @default(cuid())
  siteId      String
  hostname    String         @unique
  status      DomainStatus   @default(PENDING)
  provider    DomainProvider @default(MANUAL)
  verifiedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("domains")
}

model Hours {
  id        String   @id @default(cuid())
  siteId    String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  openTime  String?  // "09:00"
  closeTime String?  // "21:00"
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, dayOfWeek])
  @@map("hours")
}

model Event {
  id          String    @id @default(cuid())
  siteId      String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isRecurring Boolean   @default(false)
  dayOfWeek   Int?      // For recurring events: 0 = Sunday, 1 = Monday, etc.
  time        String?   // "19:00" for recurring events
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Special {
  id          String   @id @default(cuid())
  siteId      String
  title       String
  description String?
  price       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("specials")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  siteId    String?
  action    String   // "CREATE_SITE", "UPDATE_EVENT", etc.
  details   String?  // JSON string with additional details
  createdAt DateTime @default(now())

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model MenuItem {
  id          String   @id @default(cuid())
  siteId      String
  name        String
  description String?
  price       String
  category    String
  isAvailable Boolean  @default(true)
  allergens   String   @default("[]") // JSON array as string
  calories    Int?
  imageUrl    String?
  source      String   @default("manual") // "manual", "ocr", "import"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model HealthPing {
  id        String   @id @default(cuid())
  siteId    String
  url       String
  status    Int      // HTTP status code
  responseTime Int?  // Response time in milliseconds
  createdAt DateTime @default(now())

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("health_pings")
}